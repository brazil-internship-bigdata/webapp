package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import beans.Company;

public class CompanyDaoImpl implements CompanyDao {

	private static final String	SQL_SELECT_BY_NAME	= "SELECT id,company_name,company_full_name,password_company,responsible_1_name,responsible_1_email,responsible_1_phone,responsible_2_name,responsible_2_email,responsible_2_phone,project_responsible,submission_type,file_type,data_description,sign_in_date FROM Company WHERE  company_name = ?";
	private static final String	SQL_INSERT			= "INSERT INTO `bdd_sdzee`.`Company`(`company_name`,`company_full_name`,`password_company`,`responsible_1_name`,`responsible_1_email`,`responsible_1_phone`,`responsible_2_name`,`responsible_2_email`,`responsible_2_phone`,`project_responsible`,`submission_type`,`file_type`,`data_description`,`sign_in_date`)VALUES(	? , ?, ?, ?, ?, ?, ?, ?, ?, ?,  ?, ?,  ?,  NOW());";
	private static final String	SQL_CONNECTION		= "SELECT id,company_name,company_full_name,password_company,responsible_1_name,responsible_1_email,responsible_1_phone,responsible_2_name,responsible_2_email,responsible_2_phone,project_responsible,submission_type,file_type,data_description,sign_in_date FROM Company WHERE company_name = ? AND password_company = ?";
	private static final String	SQL_COMPANY_LONG	= "SELECT company_name, company_full_name, responsible_1_name, responsible_1_email, responsible_1_phone, COUNT(filename) AS nb_data_file, SUM(size_file) AS data_quantiy FROM Company c JOIN FileUpload f ON c.id=f.id_company 	WHERE f.file_type = 'csv' 	GROUP BY company_name;";

	private DAOFactory			daoFactory;

	CompanyDaoImpl(DAOFactory daoFactory) {
		this.daoFactory = daoFactory;
	}

	@Override
	public Company find(String companyName) throws DAOException {
		return find(SQL_SELECT_BY_NAME, companyName);
	}

	@Override
	public void create(Company company) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet valuesAutoGenerated = null;

		try {
			connection = daoFactory.getConnection();
			preparedStatement = DAOTools.initializePreparedStatement(connection, SQL_INSERT, true,
					company.getCompanyName(), company.getCompanyFullName(), company.getPasswordCompany(),
					company.getResponsible1Name(), company.getResponsible1Email(), company.getResponsible1Phone(),
					company.getResponsible2Name(), company.getResponsible2Email(), company.getResponsible2Phone(),
					company.getProjectResponsible(), company.getSubmissionType(), company.getFileType(),
					company.getDataDescription());
			int status = preparedStatement.executeUpdate();
			if (status == 0) {
				throw new DAOException("Fail to create a company, 0 row affected.");
			}
			valuesAutoGenerated = preparedStatement.getGeneratedKeys();
			if (valuesAutoGenerated.next()) {
				company.setId(valuesAutoGenerated.getLong(1));
			} else {
				throw new DAOException("Fail to creante a company, no id auto generated return.");
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			DAOTools.silentCloses(valuesAutoGenerated, preparedStatement, connection);
		}
	}

	@Override
	public boolean loginCheck(String companyName, String password) throws DAOException {

		System.out.println("Mail " + companyName);
		System.out.println("mdp " + password);

		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		boolean result = false;

		try {

			connection = daoFactory.getConnection();

			preparedStatement = DAOTools.initializePreparedStatement(connection, SQL_CONNECTION, false, companyName,
					password);
			resultSet = preparedStatement.executeQuery();

			if (resultSet.next()) {
				System.out.println("result ");
				result = true;
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			DAOTools.silentCloses(resultSet, preparedStatement, connection);
		}

		return result;
	}

	private Company find(String sql, Object... objets) throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		Company company = null;

		try {
			connection = daoFactory.getConnection();

			preparedStatement = DAOTools.initializePreparedStatement(connection, sql, false, objets);
			resultSet = preparedStatement.executeQuery();

			if (resultSet.next()) {
				company = map(resultSet);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			DAOTools.silentCloses(resultSet, preparedStatement, connection);
		}

		return company;
	}

	private static Company map(ResultSet resultSet) throws SQLException {
		Company company = new Company();
		company.setId(resultSet.getLong("id"));
		company.setCompanyName(resultSet.getString("company_name"));
		company.setCompanyFullName(resultSet.getString("company_full_name"));
		company.setPasswordCompany(resultSet.getString("password_company"));
		company.setResponsible1Name(resultSet.getString("responsible_1_name"));
		company.setResponsible1Email(resultSet.getString("responsible_1_email"));
		company.setResponsible1Phone(resultSet.getString("responsible_1_phone"));
		company.setResponsible2Name(resultSet.getString("responsible_2_name"));
		company.setResponsible2Email(resultSet.getString("responsible_2_email"));
		company.setResponsible2Phone(resultSet.getString("responsible_2_phone"));
		company.setProjectResponsible(resultSet.getString("project_responsible"));
		company.setSubmissionType(resultSet.getString("submission_type"));
		company.setFileType(resultSet.getString("file_type"));
		company.setDataDescription(resultSet.getString("data_description"));
		company.setSignInDate(resultSet.getTimestamp("sign_in_date"));

		return company;
	}

	@Override
	public List<Company> companyOverview() throws DAOException {
		Connection connection = null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet = null;
		List<Company> companies = new ArrayList<Company>();

		try {

			connection = daoFactory.getConnection();

			preparedStatement = DAOTools.initializePreparedStatement(connection, SQL_COMPANY_LONG, false);
			resultSet = preparedStatement.executeQuery();

			while (resultSet.next()) {
				Company company = new Company();
				company.setCompanyName(resultSet.getString("company_name"));
				company.setCompanyFullName(resultSet.getString("company_full_name"));
				company.setResponsible1Name(resultSet.getString("responsible_1_name"));
				company.setResponsible1Email(resultSet.getString("responsible_1_email"));
				company.setResponsible1Phone(resultSet.getString("responsible_1_phone"));
				company.setDataFileNumber(resultSet.getInt("nb_data_file"));
				company.setDataQuantity(resultSet.getInt("data_quantiy"));
				companies.add(company);
			}
		} catch (SQLException e) {
			throw new DAOException(e);
		} finally {
			DAOTools.silentCloses(resultSet, preparedStatement, connection);
		}

		return companies;
	}
}